{
  "_args": [
    [
      "node-res@https://registry.npmjs.org/node-res/-/node-res-3.0.0.tgz",
      "/media/tengex/Storage1/Egyetem/16-17-1/ALKG/alkfejl"
    ]
  ],
  "_from": "node-res@>=3.0.0 <4.0.0",
  "_id": "node-res@3.0.0",
  "_inCache": true,
  "_location": "/node-res",
  "_phantomChildren": {},
  "_requested": {
    "name": "node-res",
    "raw": "node-res@https://registry.npmjs.org/node-res/-/node-res-3.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/node-res/-/node-res-3.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/node-res/-/node-res-3.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/adonis-framework"
  ],
  "_resolved": "https://registry.npmjs.org/node-res/-/node-res-3.0.0.tgz",
  "_shasum": "f4fcf0ae0319e4a4a1af627e3bddec849c7af0f5",
  "_shrinkwrap": null,
  "_spec": "node-res@https://registry.npmjs.org/node-res/-/node-res-3.0.0.tgz",
  "_where": "/media/tengex/Storage1/Egyetem/16-17-1/ALKG/alkfejl",
  "author": {
    "name": "amanvirk"
  },
  "bugs": {
    "url": "https://github.com/poppinss/node-res/issues"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  },
  "dependencies": {
    "content-disposition": "^0.5.0",
    "etag": "^1.7.0",
    "mime": "^1.3.4",
    "send": "^0.14.1",
    "vary": "^1.1.0"
  },
  "description": "Nodejs http response builder",
  "devDependencies": {
    "chai": "^3.3.0",
    "co-functional": "^0.2.1",
    "co-mocha": "^1.1.2",
    "co-supertest": "0.0.10",
    "coveralls": "^2.11.4",
    "cz-conventional-changelog": "^1.1.5",
    "istanbul": "^0.3.22",
    "mocha": "^2.3.3",
    "mocha-lcov-reporter": "^1.0.0",
    "standard": "^5.4.1",
    "supertest": "^1.1.0"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/poppinss/node-res#readme",
  "keywords": [
    "builder",
    "builder",
    "http",
    "http-res",
    "node-res",
    "res",
    "response",
    "response"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "node-res",
  "optionalDependencies": {},
  "readme": "# Node Res\n\n![](http://i1117.photobucket.com/albums/k594/thetutlage/poppins-1_zpsg867sqyl.png)\n\n![](https://img.shields.io/travis/poppinss/node-res.svg)\n[![Coverage Status](https://coveralls.io/repos/poppinss/node-res/badge.svg?branch=master&service=github)](https://coveralls.io/github/poppinss/node-res?branch=master)\n\n`node-res` exposes helper methods to constructor different http response. It supports almost every method from `express` but is just an I/O module.\n\n\n## See also\n\n1. node-req\n2. node-cookie\n\n## Responding to requests.\n\n```javascript\nconst http = require('http')\nconst nodeRes = require('node-res')\n\nhttp.createServer(function (req, res) {\n  \n  // plain text\n  nodeRes.send(res, \"Hello world\")\n\n  // json\n  nodeRes.json(res, {time:\"now\"})\n\n  // jsonp\n  nodeRes.jsonp(res, {time:\"now\"}, \"callback\")\n\n}).listen(3000)\n\n```\n\nnodeRes takes http server `res` object as first argument to perform any operation.\n\n## Methods\n\n#### header (res, key, value)\n\n```javascript\nnodeRes.header(res, 'Content-Type', 'text/html')\n```\n\n#### removeHeader (res, key)\n\n```\nnodeRes.removeHeader(res, 'Content-type')\n```\n\n#### getHeader (res, key)\n\n```\nnodeRes.getHeader(res, 'Content-type')\n```\n\n#### status (res, statusCode)\n\n```javascript\nnodeRes.status(res, 200)\n```\n\n#### send(req, res, body)\n\n```javascript\nnodeRes.send(req, res, {user:\"someone\"})\n```\n\n#### json (req, res, body)\n`send` method is fully capable of making json responses, it is an alias method for readability.\n\n```javascript\nnodeRes.json(req, res, {user:\"someone\"})\n```\n\n#### jsonp (req, res, body, callback=\"callback\")\n\n```javascript\nnodeRes.jsonp(req, res, {user:\"someone\"}, \"angular\")\n```\n\n#### download (req, res, filePath)\n\n```javascript\nnodeRes.download(req, res, 'fullPathToFile')\n```\n\n#### attachment (req, res, filePath, name?, disposition=attachment?)\n\nforce download\n\n```javascript\nnodeRes.attachment(req, res, 'fullPathToFile')\nnodeRes.attachment(req, res, 'fullPathToFile', 'downloadName')\nnodeRes.attachment(req, res, 'fullPathToFile', 'downloadName', 'disposition=attachment')\n```\n\n#### location (res, url)\n\nsets location header on request\n\n```javascript\nnodeRes.location(res, 'http://example.org')\n```\n\n#### redirect (req, res, url, status=302?)\n\nredirects to given url after setting location header\n\n```javascript\nnodeRes.redirect(res, 'http://example.com', 301)\n```\n\n#### vary (res, field)\n\nAdds vary header to response, if it is not there already.\n\n```javascript\nnodeRes.vary(res, 'Accept')\n```\n\n#### descriptive methods\nNode res also has support for descriptive methods, they set the status itself without calling the `status` method.\n\n```javascript\nnodeRes.ok(req, res, 'Hello world') // will set 200 as status\nnodeRes.unauthorized(req, res, 'You must login first') // will set 401 as status\n```\n\n| method | http response status |\n|--------|-------------|\n| continue | 100 |\n| switchingProtocols | 101 |\n| ok | 200 |\n| created | 201 |\n| accepted | 202 |\n| nonAuthoritativeInformation | 203 |\n| noContent | 204 |\n| resetContent | 205 |\n| partialContent | 206 |\n| multipleChoices | 300 |\n| movedPermanently | 301 |\n| found | 302 |\n| seeOther | 303 |\n| notModified | 304 |\n| useProxy | 305 |\n| temporaryRedirect | 307 |\n| badRequest | 400 |\n| unauthorized | 401 |\n| paymentRequired | 402 |\n| forbidden | 403 |\n| notFound | 404 |\n| methodNotAllowed | 405 |\n| notAcceptable | 406 |\n| proxyAuthenticationRequired | 407 |\n| requestTimeout | 408 |\n| conflict | 409 |\n| gone | 410 |\n| lengthRequired | 411 |\n| preconditionFailed | 412 |\n| requestEntityTooLarge | 413 |\n| requestUriTooLong | 414 |\n| unsupportedMediaType | 415 |\n| requestedRangeNotSatisfiable | 416 |\n| expectationFailed | 417 |\n| unprocessableEntity | 422 |\n| tooManyRequests | 429 |\n| internalServerError | 500 |\n| notImplemented | 501 |\n| badGateway | 502 |\n| serviceUnavailable | 503 |\n| gatewayTimeout | 504 |\n| httpVersionNotSupported | 505 |\n\n## License \n(The MIT License)\n\nCopyright (c) 2015 Poppins\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/poppinss/node-res.git"
  },
  "scripts": {
    "coverage": "npm run standard && istanbul cover _mocha test --bail",
    "standard": "standard src/**/*.js test/*.js",
    "test": "npm run standard && istanbul cover _mocha --report lcovonly -- -R spec test && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"
  },
  "version": "3.0.0"
}
