{
  "_args": [
    [
      "node-req@https://registry.npmjs.org/node-req/-/node-req-1.0.4.tgz",
      "/media/tengex/Storage1/Egyetem/16-17-1/ALKG/alkfejl"
    ]
  ],
  "_from": "node-req@>=1.0.3 <2.0.0",
  "_id": "node-req@1.0.4",
  "_inCache": true,
  "_location": "/node-req",
  "_phantomChildren": {},
  "_requested": {
    "name": "node-req",
    "raw": "node-req@https://registry.npmjs.org/node-req/-/node-req-1.0.4.tgz",
    "rawSpec": "https://registry.npmjs.org/node-req/-/node-req-1.0.4.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/node-req/-/node-req-1.0.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/adonis-framework"
  ],
  "_resolved": "https://registry.npmjs.org/node-req/-/node-req-1.0.4.tgz",
  "_shasum": "dd5b1171560d03161caa7ab1aef6953c51b5a21c",
  "_shrinkwrap": null,
  "_spec": "node-req@https://registry.npmjs.org/node-req/-/node-req-1.0.4.tgz",
  "_where": "/media/tengex/Storage1/Egyetem/16-17-1/ALKG/alkfejl",
  "author": {
    "name": "amanvirk"
  },
  "bugs": {
    "url": "https://github.com/poppinss/node-req/issues"
  },
  "dependencies": {
    "accepts": "^1.3.0",
    "fresh": "^0.3.0",
    "parseurl": "^1.3.0",
    "proxy-addr": "^1.0.8",
    "qs": "^5.2.0",
    "type-is": "^1.6.9"
  },
  "description": "I/O parser for nodejs http request",
  "devDependencies": {
    "chai": "^3.3.0",
    "co": "^4.6.0",
    "co-mocha": "^1.1.2",
    "co-supertest": "0.0.10",
    "coveralls": "^2.11.4",
    "formidable": "^1.0.17",
    "istanbul": "^0.3.22",
    "mocha": "^2.3.3",
    "mocha-lcov-reporter": "^1.0.0",
    "pem": "^1.8.1",
    "standard": "^5.4.1",
    "supertest": "^1.1.0"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/poppinss/node-req#readme",
  "keywords": [
    "http-request",
    "node-http-request",
    "node-req",
    "req"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "node-req",
  "optionalDependencies": {},
  "readme": "# Node Req\n\n![](http://i1117.photobucket.com/albums/k594/thetutlage/poppins-1_zpsg867sqyl.png)\n\n![](https://img.shields.io/travis/poppinss/node-req.svg)\n[![Coverage Status](https://coveralls.io/repos/poppinss/node-req/badge.svg?branch=master&service=github)](https://coveralls.io/github/poppinss/node-req?branch=master)\n\n`node-req` is an i/o module for parsing and returning values out of HTTP request object using helper methods.It is not express, neither connect. It is just an i/o module for parsing request object.\n\n## See also\n\n1. node-res\n2. node-cookie\n\n## Http \n\n```javascript\nvar http = require('http')\nvar nodeReq = require('node-req')\n\nhttp.createServer(function (req, res) {\n  \n  // get query string from req\n  var query = nodeReq.get(req)\n\n}).listen(3000)\n\n```\n\nYes, that's all, `node-req` makes no assumption on how to add routes or handle HTTP requests. All it does it parse request object and return values out of it.\n\n## What's different from express?\n\n`express` is super cool, but it is a framework that has a lot more to offer than just parsing requests, where `node-req` is just a parser and will be an option based on your use case.\n\n## Methods\n\n#### get (req)\nreturns request query string parameters\n\n```javascript\n// req url is /user?name=doe\n\nnodeReq.get(req)\n\n// returns {name:'doe'}\n```\n\n#### method (req)\nreturns request method, or you can say HTTP verb\n\n```javascript\nnodeReq.method(req)\n\n// returns GET,POST etc\n```\n\n#### headers (req)\nreturns request headers\n\n```javascript\nnodeReq.headers(req)\n```\n\n#### header (req, key)\nreturns request header for a given key\n\n```javascript\nnodeReq.header(req, 'Content-Type')\n```\n\n#### fresh (req, res)\ntest for request freshness based on E-tag and expires header\n\n```javascript\nnodeReq.fresh(req, res)\n```\n\n#### stale (req, res)\nopposite of fresh\n\n```javascript\nnodeReq.stale(req, res)\n```\n\n#### ip (req, trust)\nReturns request ip based on trusted proxy, check out [proxyaddr](https://www.npmjs.com/package/proxy-addr) for more info\n\n```javascript\nnodeReq.ip(req, ['127.0.0.0/8', '10.0.0.0/8'])\n```\n\n#### ips (req, trust)\nReturns list of all IP address associated with a request, starting from closest to furthest based on trusted proxy. Also check out [proxyaddr](https://www.npmjs.com/package/proxy-addr) for more info\n\n```javascript\nnodeReq.ips(req, function (remoteAddress) {\n  return remoteAddress === '127.0.0.1'\n})\n```\n\n#### secure (req)\nIs request from https ?\n\n```javascript\nnodeReq.secure(req)\n```\n\n#### subdomains (req, trust, offset=2)\nList of subdomains on a given request. If trust is enabled it will refer to the `X-Forwarded-Host` header. Also check out [proxyaddr](https://www.npmjs.com/package/proxy-addr) for more info\n\n```javascript\n// request url gig.baz.com\nnodeReq.subdomains(req, false)\n\n// returns ['gig']\n```\n\nwhereas\n\n```javascript\n// request url www.baz.com\nnodeReq.subdomains(req)\n\n// returns []\n```\n\n#### ajax (req)\ndetermines whether a request is ajax or not based on `X-Requested-With` header.\n\n```javascript\nnodeReq.ajax(req)\n```\n\n#### pjax (req)\ndetermines whether a request is pjax or not based on `X-Pjax` header\n\n```javascript\nnodeReq.pjax(req)\n```\n\n#### hostname (req, trust)\nreturns request hostname and if trust is enabled, it will refer to the `X-Forwarded-Host` header. Also check out [proxyaddr](https://www.npmjs.com/package/proxy-addr) for more info\n\n```javascript\nnodeReq.hostname(req, trust)\n```\n\n#### url (req)\nreturns request URL without the query string\n\n```javascript\n// request url /users?offset=0&limit=10\n\nnodeReq.url(req)\n\n// returns /users\n```\n\n#### originalUrl (req)\nreturns request originalUrl with query string\n\n```javascript\n// request url /users?offset=0&limit=10\n\nnodeReq.originalUrl(req)\n\n// returns /users?offset=0&limit=10\n```\n\n#### is (req, [types])\ntells whether request is of certain type or not based on `Content-type` header.\n\n```javascript\nnodeReq.is(req, 'html')\n// true\nnodeReq.is(req, 'text/html')\n// true\nnodeReq.is(req, ['json','html'])\n//true\n```\n\n#### accepts (req, [types])\ntells whether request accepts data of certain type based on `Accepts` header.\n\n```javascript\nnodeReq.accepts(req, 'html')\n// 'html'\nnodeReq.accepts(req, 'text/html')\n// 'text/html'\nnodeReq.accepts(req, ['json','html'])\n// 'html'\n```\n\n#### hasBody (req)\ntells whether request has body to be read by any body parser.\n\n```javascript\nif (nodeReq.hasBody(req)) {\n  req.on('data', function (chunk) {\n    // ... \n  })\n}\n```\n\n## License \n(The MIT License)\n\nCopyright (c) 2015 Poppins\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/poppinss/node-req.git"
  },
  "scripts": {
    "coverage": "npm run standard && istanbul cover _mocha test --bail",
    "standard": "standard src/**/*.js test/*.js",
    "test": "npm run standard && istanbul cover _mocha --report lcovonly -- -R spec test && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"
  },
  "version": "1.0.4"
}
